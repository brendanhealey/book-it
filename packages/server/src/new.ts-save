// npm install @apollo/server express graphql cors body-parser
import { ApolloServer } from "@apollo/server";
import { expressMiddleware } from "@apollo/server/express4";
import { ApolloServerPluginDrainHttpServer } from "@apollo/server/plugin/drainHttpServer";
import express from "express";
import http from "http";
import cors from "cors";
import bodyParser from "body-parser";
import { typeDefs } from "schema";
import mysql2 from "mysql2";

const connection = mysql2.createConnection({
  host: "book-it.c37uza9ctf0v.eu-west-2.rds.amazonaws.com",
  user: "admin",
  password: "adminadmin",
  database: "book-it-schema",
});

const resolvers = {
  Query: {
    users: () => getQuery("SELECT * FROM `users`"),
  },
  Mutation: {
    userLogin: (email: string, password: string) => {
      console.log(email, password);
      console.log("XXXXXXXXXXXXXXXXXXXXXXXXXXX");
      return {
        data: {
          userLogin: {
            status: "success",
            jwt: "abc123",
          },
        },
      };
    },
  },
};

function getQuery(sql) {
  return new Promise((resolve, reject) => {
    connection.query(sql, (error, results) => {
      if (error) return reject(error);
      return resolve(results);
    });
  });
}

interface MyContext {
  token?: String;
}

// Required logic for integrating with Express
const app = express();
// Our httpServer handles incoming requests to our Express app.
// Below, we tell Apollo Server to "drain" this httpServer,
// enabling our servers to shut down gracefully.
const httpServer = http.createServer(app);

// Same ApolloServer initialization as before, plus the drain plugin
// for our httpServer.
const server = new ApolloServer<MyContext>({
  typeDefs,
  resolvers,
  plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],
});
// Ensure we wait for our server to start
await server.start();

// Set up our Express middleware to handle CORS, body parsing,
// and our expressMiddleware function.
app.use(
  "/",
  cors<cors.CorsRequest>(),
  bodyParser.json(),
  // expressMiddleware accepts the same arguments:
  // an Apollo Server instance and optional configuration options
  expressMiddleware(server, {
    context: async ({ req }) => ({ token: req.headers.token }),
  })
);

// Modified server startup
await new Promise<void>((resolve) =>
  httpServer.listen({ port: 4000 }, resolve)
);
console.log(`ðŸš€ Server ready at http://localhost:4000/`);
